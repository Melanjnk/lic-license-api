// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ozonmp/lic_license_api/v1/lic_license_api.proto

package lic_license_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on License with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *License) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for LicenseId

	// no validation rules for Title

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LicenseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LicenseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// LicenseValidationError is the validation error returned by License.Validate
// if the designated constraints aren't met.
type LicenseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LicenseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LicenseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LicenseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LicenseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LicenseValidationError) ErrorName() string { return "LicenseValidationError" }

// Error satisfies the builtin error interface
func (e LicenseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLicense.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LicenseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LicenseValidationError{}

// Validate checks the field values on CreateLicenseV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateLicenseV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetLicenseId() <= 0 {
		return CreateLicenseV1RequestValidationError{
			field:  "LicenseId",
			reason: "value must be greater than 0",
		}
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 150 {
		return CreateLicenseV1RequestValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
	}

	return nil
}

// CreateLicenseV1RequestValidationError is the validation error returned by
// CreateLicenseV1Request.Validate if the designated constraints aren't met.
type CreateLicenseV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLicenseV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLicenseV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLicenseV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLicenseV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLicenseV1RequestValidationError) ErrorName() string {
	return "CreateLicenseV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLicenseV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLicenseV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLicenseV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLicenseV1RequestValidationError{}

// Validate checks the field values on CreateLicenseV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateLicenseV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for LicenseId

	return nil
}

// CreateLicenseV1ResponseValidationError is the validation error returned by
// CreateLicenseV1Response.Validate if the designated constraints aren't met.
type CreateLicenseV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLicenseV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLicenseV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLicenseV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLicenseV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLicenseV1ResponseValidationError) ErrorName() string {
	return "CreateLicenseV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLicenseV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLicenseV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLicenseV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLicenseV1ResponseValidationError{}

// Validate checks the field values on DescribeLicenseV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeLicenseV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetLicenseId() <= 0 {
		return DescribeLicenseV1RequestValidationError{
			field:  "LicenseId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DescribeLicenseV1RequestValidationError is the validation error returned by
// DescribeLicenseV1Request.Validate if the designated constraints aren't met.
type DescribeLicenseV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeLicenseV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeLicenseV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeLicenseV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeLicenseV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeLicenseV1RequestValidationError) ErrorName() string {
	return "DescribeLicenseV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeLicenseV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeLicenseV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeLicenseV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeLicenseV1RequestValidationError{}

// Validate checks the field values on DescribeLicenseV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeLicenseV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLicense()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeLicenseV1ResponseValidationError{
				field:  "License",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeLicenseV1ResponseValidationError is the validation error returned by
// DescribeLicenseV1Response.Validate if the designated constraints aren't met.
type DescribeLicenseV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeLicenseV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeLicenseV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeLicenseV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeLicenseV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeLicenseV1ResponseValidationError) ErrorName() string {
	return "DescribeLicenseV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeLicenseV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeLicenseV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeLicenseV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeLicenseV1ResponseValidationError{}

// Validate checks the field values on ListLicenseV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListLicenseV1Request) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListLicenseV1RequestValidationError is the validation error returned by
// ListLicenseV1Request.Validate if the designated constraints aren't met.
type ListLicenseV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLicenseV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLicenseV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLicenseV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLicenseV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLicenseV1RequestValidationError) ErrorName() string {
	return "ListLicenseV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLicenseV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLicenseV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLicenseV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLicenseV1RequestValidationError{}

// Validate checks the field values on ListLicenseV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListLicenseV1Response) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetLicenses() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLicenseV1ResponseValidationError{
					field:  fmt.Sprintf("Licenses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListLicenseV1ResponseValidationError is the validation error returned by
// ListLicenseV1Response.Validate if the designated constraints aren't met.
type ListLicenseV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLicenseV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLicenseV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLicenseV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLicenseV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLicenseV1ResponseValidationError) ErrorName() string {
	return "ListLicenseV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLicenseV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLicenseV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLicenseV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLicenseV1ResponseValidationError{}

// Validate checks the field values on RemoveLicenseV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveLicenseV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetLicenseId() <= 0 {
		return RemoveLicenseV1RequestValidationError{
			field:  "LicenseId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// RemoveLicenseV1RequestValidationError is the validation error returned by
// RemoveLicenseV1Request.Validate if the designated constraints aren't met.
type RemoveLicenseV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveLicenseV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveLicenseV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveLicenseV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveLicenseV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveLicenseV1RequestValidationError) ErrorName() string {
	return "RemoveLicenseV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveLicenseV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveLicenseV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveLicenseV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveLicenseV1RequestValidationError{}

// Validate checks the field values on RemoveLicenseV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveLicenseV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Found

	return nil
}

// RemoveLicenseV1ResponseValidationError is the validation error returned by
// RemoveLicenseV1Response.Validate if the designated constraints aren't met.
type RemoveLicenseV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveLicenseV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveLicenseV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveLicenseV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveLicenseV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveLicenseV1ResponseValidationError) ErrorName() string {
	return "RemoveLicenseV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveLicenseV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveLicenseV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveLicenseV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveLicenseV1ResponseValidationError{}

// Validate checks the field values on LicenseEventPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LicenseEventPayload) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetLicenseId() <= 0 {
		return LicenseEventPayloadValidationError{
			field:  "LicenseId",
			reason: "value must be greater than 0",
		}
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 150 {
		return LicenseEventPayloadValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 150 runes, inclusive",
		}
	}

	return nil
}

// LicenseEventPayloadValidationError is the validation error returned by
// LicenseEventPayload.Validate if the designated constraints aren't met.
type LicenseEventPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LicenseEventPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LicenseEventPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LicenseEventPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LicenseEventPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LicenseEventPayloadValidationError) ErrorName() string {
	return "LicenseEventPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e LicenseEventPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLicenseEventPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LicenseEventPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LicenseEventPayloadValidationError{}
