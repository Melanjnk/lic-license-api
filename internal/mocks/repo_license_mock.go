// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ozonmp/lic-license-api/internal/repo/license/service (interfaces: LicenseRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	license "github.com/ozonmp/lic-license-api/internal/model/license"
	repo "github.com/ozonmp/lic-license-api/internal/repo"
)

// MockLicenseRepo is a mock of LicenseRepo interface.
type MockLicenseRepo struct {
	ctrl     *gomock.Controller
	recorder *MockLicenseRepoMockRecorder
}

// MockLicenseRepoMockRecorder is the mock recorder for MockLicenseRepo.
type MockLicenseRepoMockRecorder struct {
	mock *MockLicenseRepo
}

// NewMockLicenseRepo creates a new mock instance.
func NewMockLicenseRepo(ctrl *gomock.Controller) *MockLicenseRepo {
	mock := &MockLicenseRepo{ctrl: ctrl}
	mock.recorder = &MockLicenseRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLicenseRepo) EXPECT() *MockLicenseRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockLicenseRepo) Add(arg0 context.Context, arg1 *license.License, arg2 repo.QueryerExecer) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1, arg2)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockLicenseRepoMockRecorder) Add(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockLicenseRepo)(nil).Add), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockLicenseRepo) Get(arg0 context.Context, arg1 uint64, arg2 repo.QueryerExecer) (*license.License, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*license.License)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockLicenseRepoMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLicenseRepo)(nil).Get), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockLicenseRepo) List(arg0 context.Context, arg1, arg2 uint64, arg3 repo.QueryerExecer) ([]*license.License, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*license.License)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockLicenseRepoMockRecorder) List(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLicenseRepo)(nil).List), arg0, arg1, arg2, arg3)
}

// Remove mocks base method.
func (m *MockLicenseRepo) Remove(arg0 context.Context, arg1 uint64, arg2 repo.QueryerExecer) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remove indicates an expected call of Remove.
func (mr *MockLicenseRepoMockRecorder) Remove(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockLicenseRepo)(nil).Remove), arg0, arg1, arg2)
}
