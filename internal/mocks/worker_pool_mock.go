// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ozonmp/lic-license-api/internal/app/worker_pool (interfaces: WorkerLicPool)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/ozonmp/lic-license-api/internal/model"
)

// MockWorkerLicPool is a mock of WorkerLicPool interface.
type MockWorkerLicPool struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerLicPoolMockRecorder
}

// MockWorkerLicPoolMockRecorder is the mock recorder for MockWorkerLicPool.
type MockWorkerLicPoolMockRecorder struct {
	mock *MockWorkerLicPool
}

// NewMockWorkerLicPool creates a new mock instance.
func NewMockWorkerLicPool(ctrl *gomock.Controller) *MockWorkerLicPool {
	mock := &MockWorkerLicPool{ctrl: ctrl}
	mock.recorder = &MockWorkerLicPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerLicPool) EXPECT() *MockWorkerLicPoolMockRecorder {
	return m.recorder
}

// Clean mocks base method.
func (m *MockWorkerLicPool) Clean(arg0 model.LicenseEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clean", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clean indicates an expected call of Clean.
func (mr *MockWorkerLicPoolMockRecorder) Clean(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockWorkerLicPool)(nil).Clean), arg0)
}

// Stop mocks base method.
func (m *MockWorkerLicPool) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockWorkerLicPoolMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockWorkerLicPool)(nil).Stop))
}

// Update mocks base method.
func (m *MockWorkerLicPool) Update(arg0 model.LicenseEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockWorkerLicPoolMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWorkerLicPool)(nil).Update), arg0)
}
