// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ozonmp/lic-license-api/internal/repo (interfaces: Repo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/ozonmp/lic-license-api/internal/model"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// CreateLicense mocks base method.
func (m *MockRepo) CreateLicense(arg0 context.Context, arg1 *model.License) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLicense", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLicense indicates an expected call of CreateLicense.
func (mr *MockRepoMockRecorder) CreateLicense(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLicense", reflect.TypeOf((*MockRepo)(nil).CreateLicense), arg0, arg1)
}

// DescribeLicense mocks base method.
func (m *MockRepo) DescribeLicense(arg0 context.Context, arg1 uint64) (*model.License, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLicense", arg0, arg1)
	ret0, _ := ret[0].(*model.License)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLicense indicates an expected call of DescribeLicense.
func (mr *MockRepoMockRecorder) DescribeLicense(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLicense", reflect.TypeOf((*MockRepo)(nil).DescribeLicense), arg0, arg1)
}

// ListLicense mocks base method.
func (m *MockRepo) ListLicense(arg0 context.Context, arg1, arg2 uint64) ([]*model.License, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLicense", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.License)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLicense indicates an expected call of ListLicense.
func (mr *MockRepoMockRecorder) ListLicense(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLicense", reflect.TypeOf((*MockRepo)(nil).ListLicense), arg0, arg1, arg2)
}

// RemoveLicense mocks base method.
func (m *MockRepo) RemoveLicense(arg0 context.Context, arg1 uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLicense", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLicense indicates an expected call of RemoveLicense.
func (mr *MockRepoMockRecorder) RemoveLicense(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLicense", reflect.TypeOf((*MockRepo)(nil).RemoveLicense), arg0, arg1)
}
